# -*- coding: utf-8 -*-
"""split_images.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s-lT5Cf6axjY7aEjucmAxPy7FbYpWAKD

# Install and import
"""

#!pip install Pillow 
#!pip install scipy==1.1.0 
#from scipy import misc
from imageio import imread
from imageio import imwrite
#from PIL import Image

import cv2
import os

from datetime import datetime
import random as rand
from datetime import datetime
import os 
from tqdm import tqdm # progress bar
import sys
from sys import exit
from time import time 
 
delimiter = ', ' 
rand.seed(42)
dash = '-'*80

#NOT really used
def load_images_from_folder(folder):
    images = []
    for filename in os.listdir(folder):
        img = cv2.imread(os.path.join(folder,filename))
        if img is not None:
            images.append(img)
    return images



def return_images_names_from_folder(reading_from_folder):
  all_directories = os.listdir(reading_from_folder)
  all_images = []
  admitted_formats = [".jpg",".JPG",".png",".PNG"]
  for file in all_directories:
    if any(str(file[-4:]) == f for f in admitted_formats):
      all_images.append(file)
  return all_images



def create_dir(path):
  try:
      os.makedirs(path, exist_ok=True)
  except OSError:
      print ("Creation of the directory %s failed" % path)
  else:
      print ("Successfully created the directory %s " % path)

def splitv_save(PATHin, PATHout, start = 0, l = 10, extension_out = ".jpg",n = 2, saveintermediate = False):
  counter = 0
  for filename in os.listdir(PATHin)[start:l]:
    print (filename)
    counter +=1
    #img = Image.open(os.path.join(PATHin, filename)) # images are color images
    img = imread (os.path.join(PATHin, filename))
    #print (img.shape[0])
    height= img.shape[0]
    width= img.shape[1]
    channels = img.shape[2]

    # Cut the image in half
    width_cutoff = width // n
    s1 = img[:, :width_cutoff,:]
    s2 = img[:, width_cutoff:,:]

    save_s1 = PATHout+'/'+filename[0:22]+'-sx'+ extension_out
    save_s2 = PATHout+'/'+filename[0:22]+'-dx'+ extension_out
    #print (save_s1)
    if saveintermediate == True:
      imwrite(save_s1,s1)
      imwrite(save_s2,s2)

  print ("all %s pictures have been halved and are under directory" %counter)
  print (PATHout)
  return s1,s2


def splith_save(PATHin, PATHout, start = 0, l = 10, extension_out = ".jpg", n = 2 , saveintermediate = False):
  counter = 0
  counter = 0
  for filename in os.listdir(PATHin)[start:l]:
    counter += 1
    #img = Image.open(os.path.join(PATHin, filename)) # images are color images
    img = imread (os.path.join(PATHin, filename))
    #print (img.shape[0])
    height= img.shape[0]
    width= img.shape[1]
    channels = img.shape[2]

    # Cut the image in half
    height_cutoff = height // n
    s1 = img[:height_cutoff,:,:]
    s2 = img[height_cutoff:,:,:]

    save_s1 = PATHout+'/'+filename[0:23]+'-up'+ extension_out
    save_s2 = PATHout+'/'+filename[0:23]+'-down'+ extension_out
    #print (save_s1)
    if saveintermediate == True:
      imwrite(save_s1,s1)
      imwrite(save_s2,s2)
  print ("all %s pictures have been halved and are under directory" %counter)
  print (PATHout)
  return s1,s2
  
  
def split_one(file, PATHtoIMG, PATHout,type_split = 'v', start = 0, l = 10, extension_out = ".jpg",n = 2, saveintermediate = False):
 
    img = imread (os.path.join(PATHtoIMG, file))
    height= img.shape[0]
    width= img.shape[1]
    channels = img.shape[2]
    
    # Cut the image in half
    if type_split == 'v':# vertically
        width_cutoff = width // n
        s1 = img[:, :width_cutoff,:]
        s2 = img[:, width_cutoff:,:]
        cut1 = '-sx'
        cut2 = '-dx'
        
    else: #horizontally
        height_cutoff = height // n
        s1 = img[:height_cutoff,:,:]
        s2 = img[height_cutoff:,:,:]
        cut1 = '-up' 
        cut2 = '-low'
    
    save_s1 = PATHout+'/'+file[0:-4]+cut1+ extension_out
    save_s2 = PATHout+'/'+file[0:-4]+cut2+ extension_out
    #print (save_s1)
    if saveintermediate == True:
      imwrite(save_s1,s1)
      imwrite(save_s2,s2)

    return s1,save_s1,s2,save_s2