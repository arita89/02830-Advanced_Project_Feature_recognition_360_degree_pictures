# -*- coding: utf-8 -*-
"""elaborate_results_graphs_pipeline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CL9_DSECBADRgI6hl9SMSI_r4CaKtcq6

# install

# import
"""

import pandas as pd
import os
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors

"""## google drive mount"""

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

# change work directory and check on where you are 
!ls

"""# directories"""

#change work directory
os.chdir("/content/drive/My Drive/images/")

# var my directory
mydir = os.getcwd()
mydir

files_in_sub = os.listdir(mydir)
files_in_sub

"""## create images folder if it doesnt exist yet"""

images_folder = mydir + "/images/"
try: 
    os.mkdir(images_folder) 
    print ("-created sub_dir: %s" %images_folder)
except OSError as error: 
  print(error)

"""#functions utilities"""

def get_color_list(set_colors):
  by_hsv = ((tuple(mcolors.rgb_to_hsv(mcolors.to_rgb(color))),
                    name)
                  for name, color in set_colors.items())
  names = [name for hsv, name in by_hsv]
  return names

set_colors = [mcolors.BASE_COLORS, mcolors.CSS4_COLORS]
#get_color_list(set_colors[1])

def get_best_color_list(num_models):
  print (num_models)
  if num_models<=8:
    color_list = get_color_list(set_colors[0])
  else:
    color_list = get_color_list(set_colors[1])
  return color_list

def color_best_red(val):
    """
    Takes a scalar and returns a string with
    the css property `'color: red'` for negative
    strings, black otherwise.
    """
    color = 'red' if val == absolute_min  else 'black'
    return 'color: %s' % color

def highlight_max(s):
    '''
    highlight the maximum in a Series yellow.
    '''
    is_max = s == s.max()
    return ['background-color: red' if v else '' for v in is_max]

def highlight_min(s):
    '''
    highlight the maximum in a Series yellow.
    '''
    is_max = s == s.min()
    return ['background-color: yellow' if v else '' for v in is_max]

"""#ALL

## load all files in their own dataframe
"""

all_dataframes = dict()

# load overview files
for data in files_in_sub[1:3]:
  print ("")
  print (data)
  df =  pd.read_csv('%s'%data, sep=',',index_col=0 , engine='python',skiprows = 1,nrows = 10)
  print (df.head(20))
  all_dataframes[data] = df

"""## all boxplots"""

# all box plots
for key in list(all_dataframes.keys()):
  df = all_dataframes[key]
  print (key)
  print (df.head(20))
  all_min = df.min()
  absolute_min = all_min.min()
  num_epochs, num_models = df.shape

  #df.style.apply(highlight_min)

  #print (num_epochs, num_models)
  all_colors = get_best_color_list(num_models)
  all_columns = df.columns.tolist()
  #fig, ax = plt.subplots()


  # boxplots
  # demonstrate how to customize the display different elements:
  boxprops = dict(linestyle='-', linewidth=1, color='k')
  medianprops = dict(linestyle='-', linewidth=1, color='k')

  plt.figure(counter)
  ax = df.boxplot(column=all_columns,
            showfliers=False, showmeans=True,
            boxprops=boxprops,
            medianprops=medianprops)
  plt.title("Boxplot of %s" %key,fontsize=15)
  # get rid of the automatic 'Boxplot grouped by group_by_column_name' title
  plt.suptitle("")
  ax.set_xticklabels(labels = all_columns ,rotation=90)
  #plt.xticks(rotation=‌​45)

  plt.show()
  fig.tight_layout(pad=3.0)

"""## all plots"""

key = list(all_dataframes.keys())[0]
df = all_dataframes[key]
# get out the columns as lists
x_ax = df.index.tolist()
Y = dict() # dictionary

for c in all_columns:
  Y[c] = df[c].tolist()

# all plots
counter = 1
for key in list(all_dataframes.keys()):
  df = all_dataframes[key]
  print (key)
  print (df.head(20))
  all_min = df.min()
  absolute_min = all_min.min()
  num_epochs, num_models = df.shape

  #print (num_epochs, num_models)
  all_colors = get_best_color_list(num_models)
  all_columns = df.columns.tolist()

  # get out the columns as lists
  x_ax = df.index.tolist()
  Y = dict() # dictionary

  for c in all_columns:
    Y[c] = df[c].tolist()
    
  fig = plt.figure(figsize=(20, 10))

  plt.subplot(3, 1, counter)

  thishandles=[]
  for j in range(len(Y)):
      if j != len(Y)-1:
        key = list(Y.keys())[j]
        y = Y[key]
        this_color = all_colors[j]
        this_alpha = 0.4
        this_label = all_columns[j]
        plt.plot(x_ax, y,"--", color= this_color, alpha = this_alpha, label = this_label)
        thishandles.append(this_label)
      
      else:
        key = list(Y.keys())[j]
        y = Y[key]
        this_color = all_colors[j]
        this_alpha = 1
        this_label = all_columns[j]
        plt.plot(x_ax, y, color= this_color, alpha = this_alpha, label = this_label)
        thishandles.append(this_label)

  plt.xticks(rotation=90)
  plt.yticks(rotation=90)
  plt.legend(thishandles)
  plt.xlabel("epochs", fontsize=15)
  plt.ylabel("Loss ", fontsize=15)
  plt.title(" %s of %s models over %s epochs" %(k,num_models,num_epochs) , fontsize=15)
  counter += 1

"""# MODELs DF

## load model files
"""

files_in_sub[4:-1]
files_in_sub

all_models_dataframes = dict()

# load overview files
for data in files_in_sub[4:-1]:
  print ("")
  print (data)
  #list(range(0,8))
  df =  pd.read_csv('%s'%data, sep=',',index_col=0 , engine='python',skiprows = 1,nrows = 10, usecols=[0,4,5,6,7])
  print (df.head(20))
  all_models_dataframes[data] = df

"""## min max"""

df.style.apply(highlight_max)

df.style.apply(highlight_min)

"""## all models plots"""

all_columns = df.columns.tolist()

# get out the columns as lists
x_ax = df.index.tolist()
Y = dict() # dictionary

for c in all_columns:
  Y[c] = df[c].tolist()
for j in range(len(Y)):
  print (j)

# all models plots
counter = 1
for key in list(all_models_dataframes.keys()):
  df = all_models_dataframes[key]
  print ("")
  print (key)
  #print (df.head(20))
  all_min = df.min()
  absolute_min = all_min.min()
  num_epochs, num_models = df.shape

  #print (num_epochs, num_models)
  all_colors = get_best_color_list(num_models)
  all_columns = df.columns.tolist()

  # get out the columns as lists
  x_ax = df.index.tolist()
  Y = dict() # dictionary

  for c in all_columns:
    Y[c] = df[c].tolist()
    
  fig = plt.figure(figsize=(20, 5))

  plt.subplot(3, 1, counter)

  thishandles=[]
  for j in range(len(Y))[:3]:
    plt.subplot(1, 2, 1)
    key = list(Y.keys())[j]
    y = Y[key]
    this_color = all_colors[j]
    this_alpha = 0.8
    this_label = all_columns[j]
    plt.plot(x_ax, y,"--", color= this_color, alpha = this_alpha, label = this_label)
    thishandles.append(this_label)
    plt.grid()
    plt.xticks(rotation=90)
    plt.yticks(rotation=90)
    plt.legend(thishandles)
    plt.xlabel("epochs", fontsize=15)
    plt.ylabel("%s" %this_label, fontsize=15)
    plt.title(" %s %s over %s epochs" %(k,this_label ,num_epochs) , fontsize=15)

  plt.subplot(1, 2, 2)
  thishandles=[] 
  for j in range(len(Y))[3:]:
    key = list(Y.keys())[j]
    y = Y[key]
    this_color = all_colors[j]
    this_alpha = 0.8
    this_label = all_columns[j]
    plt.plot(x_ax, y, color= this_color, alpha = this_alpha, label = this_label)
    thishandles.append(this_label)
    plt.grid()
    plt.xticks(rotation=90)
    plt.yticks(rotation=90)
    plt.legend(thishandles)
    plt.xlabel("epochs", fontsize=15)
    plt.ylabel("%s"%this_label, fontsize=15)
    plt.title(" %s %s over %s epochs" %(k,this_label,num_epochs) , fontsize=15)

"""# one trial round

loading .csv file with results for various plots
"""

# Read a csv file to a dataframe with custom delimiter
df =  pd.read_csv('datasets_overview.csv', sep=',',index_col=0 , engine='python')
df.head(10)

all_min = df.min()
absolute_min = all_min.min()

s = df.style.applymap(color_best_red)
s

df.style.apply(highlight_max)

df.style.apply(highlight_min)

num_epochs, num_models = df.shape

# fetch colors
all_colors = get_best_color_list(num_models)
all_colors

# extract columns from df
all_columns = df.columns.tolist()
all_columns

list(df.columns.values)

key = list(all_dataframes.keys())[0]
df = all_dataframes[key]
print (key)
print (df.head(20))
all_min = df.min()
absolute_min = all_min.min()
num_epochs, num_models = df.shape

#df.style.apply(highlight_min)

#print (num_epochs, num_models)
all_colors = get_best_color_list(num_models)
all_columns = df.columns.tolist()
#fig, ax = plt.subplots()


# boxplots
# demonstrate how to customize the display different elements:
boxprops = dict(linestyle='-', linewidth=1, color='k')
medianprops = dict(linestyle='-', linewidth=1, color='k')

plt.figure(counter)
ax = df.boxplot(column=all_columns,
          showfliers=False, showmeans=True,
          boxprops=boxprops,
          medianprops=medianprops)
plt.title("Boxplot of %s" %key,fontsize=15)
# get rid of the automatic 'Boxplot grouped by group_by_column_name' title
plt.suptitle("")
ax.set_xticklabels(labels = all_columns ,rotation=90)
#plt.xticks(rotation=‌​45)

plt.show()

"""## Box plots"""

#https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.boxplot.html
boxplot = df.boxplot(column=all_columns[:-1])

"""## Plots"""

# get out the columns as lists
x_ax = df.index.tolist()
Y = dict() # dictionary

for c in all_columns:
  Y[c] = df[c].tolist()

"""## compare training loss and training accuracies of multiple models"""

fig = plt.figure(figsize=(8, 10))

plt.subplot(2, 1, 1)

thishandles=[]
for j in range(len(Y)):
    if j != len(Y)-1:
      key = list(Y.keys())[j]
      y = Y[key]
      this_color = all_colors[j]
      this_alpha = 0.4
      this_label = all_columns[j]
      plt.plot(x, y,"--", color= this_color, alpha = this_alpha, label = this_label)
      thishandles.append(this_label)
    
    else:
      key = list(Y.keys())[j]
      y = Y[key]
      this_color = all_colors[j]
      this_alpha = 1
      this_label = all_columns[j]
      plt.plot(x, y, color= this_color, alpha = this_alpha, label = this_label)
      thishandles.append(this_label)

plt.xticks(rotation=90)
plt.yticks(rotation=90)
plt.legend(thishandles)
plt.xlabel("epochs", fontsize=15)
plt.ylabel("Loss ", fontsize=15)
plt.title(" Training Loss of %s models over %s epochs" %(num_models,num_epochs) , fontsize=15)

plt.subplot(2, 1, 2)
thishandles=[]
for j in range(len(Y)):
    if j != len(Y)-1:
      key = list(Y.keys())[j]
      y = Y[key]
      y = [(1/element) for element in y]
      this_color = all_colors[j]
      this_alpha = 0.4
      this_label = all_columns[j]
      plt.plot(x, y,"--", color= this_color, alpha = this_alpha, label = this_label)
      thishandles.append(this_label)
    
    else:
      key = list(Y.keys())[j]
      y = Y[key]
      y = [(1/element) for element in y] # this is just to fake accuracies
      this_color = all_colors[j]
      this_alpha = 1
      this_label = all_columns[j]
      plt.plot(x, y, color= this_color, alpha = this_alpha, label = this_label)
      thishandles.append(this_label)

plt.xticks(rotation=90)
plt.yticks(rotation=90)
plt.legend(thishandles)
plt.xlabel("epochs", fontsize=15)
plt.ylabel("Loss ", fontsize=15)
plt.title(" Training Accuracy of %s models over %s epochs" %(num_models,num_epochs) , fontsize=15)

fig.tight_layout(pad=3.0)

"""## random values for dummy test"""

import random

# random accuracies

#all_col = 3*4
start = 0
array =  list()
for c in range(4):
  print ("----------------")
  start = start +0.1
  end = start+ 0.2
  sampling = []
  increment = 0.10
  for i in range(10):
    x = random.uniform(start,end)
    random_inc = random.uniform(0.01,0.08)
    increment = increment *(1+random_inc) 
    sampling.append(round(x+increment,3))
  array.append(sampling)
  for i in sampling:
    print (i)

array

import numpy as np
a = np.array(array)
#print(a)
final = a.T
print (final)

df = pd.DataFrame(data=final)#, columns=all_columns[:-1])
df.head(10)

df[0]

